[{"C:\\Users\\KINGSLEY UBAH\\Node\\harperdb-movie-generator\\src\\index.js":"1","C:\\Users\\KINGSLEY UBAH\\Node\\harperdb-movie-generator\\src\\App.js":"2","C:\\Users\\KINGSLEY UBAH\\Node\\harperdb-movie-generator\\src\\components\\Movie.js":"3"},{"size":446,"mtime":1628787476534,"results":"4","hashOfConfig":"5"},{"size":442,"mtime":1628784801743,"results":"6","hashOfConfig":"5"},{"size":2165,"mtime":1628937433079,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"p1i3wr",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\KINGSLEY UBAH\\Node\\harperdb-movie-generator\\src\\index.js",[],["16","17"],"C:\\Users\\KINGSLEY UBAH\\Node\\harperdb-movie-generator\\src\\App.js",[],"C:\\Users\\KINGSLEY UBAH\\Node\\harperdb-movie-generator\\src\\components\\Movie.js",["18","19"],"import React from 'react';\r\nimport { useHarperDB } from 'use-harperdb';\r\n\r\nfunction Movie() {\r\nlet [data, loading, error, refresh] = useHarperDB({\r\n    query: {\r\n      operation: 'sql',\r\n      sql: `select * from collection.movie where id = ${Math.floor(Math.random() * 8) + 1}`\r\n    }\r\n    /* interval: 40000 */\r\n  }\r\n  )\r\n\r\n\r\n\r\n  if(loading) {\r\n    return <div> Loading... </div>\r\n  }\r\n\r\n\r\nif(data) {\r\n      return (\r\n<>\r\n<div className=\"movie-cover\">\r\n  <div className=\"top-information\">\r\n    <h2 className=\"title\">{data[0].title}</h2>\r\n    <div className=\"circle\">\r\n      <div className=\"ratings\">\r\n        <span className=\"big-half\">{data[0].rating}</span>/<span className=\"small-half\">10</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div className=\"supporting-info\">\r\n    <span className=\"year\">{data[0].date}</span> -\r\n    <span className=\"time\">{data[0].hours}h:{data[0].minutes}m</span>\r\n  </div>\r\n  <div className=\"image\">\r\n    <img src={data[0].cover} alt=\"Movie Image\" />\r\n  </div>\r\n</div>\r\n\r\n<div className=\"genres\">\r\n  <ul className=\"movie-genres\">\r\n    {data[0].genres.map((genre, index) => {\r\n    return (\r\n    <li key={index}><span className=\"movie-genre-item\">{genre}</span></li>\r\n  )\r\n    })}\r\n  </ul>\r\n</div>\r\n\r\n<div className=\"lower-information\">\r\n  <p>{data[0].description}</p>\r\n\r\n  <hr />\r\n  <p> Starring: {data[0].stars.map((star, index) => {\r\n    return (\r\n    <span key={index}>{star} - </span>\r\n    )\r\n    })}\r\n  </p>\r\n  <hr />\r\n  <p> Writers:\r\n    {data[0].writers.map((writer, index) => {\r\n      return (\r\n    <span key={index} className=\"writer\">{writer} - </span>\r\n    )\r\n    })}\r\n  </p>\r\n  <hr />\r\n  <p>Directors:\r\n    {data[0].directors.map((director, index) => {\r\n      return (\r\n    <span key={index} className=\"director\">{director} - </span>\r\n    )\r\n    })}\r\n  </p>\r\n  <hr />\r\n  <div className=\"action-buttons\">\r\n    <a href={data[0].website} className=\"visit-movie-button\">Visit Movie</a>\r\n    <a href=\"\" className=\"generate-movie-button\" onClick={refresh}>GENERATE NEW MOVIE</a>\r\n  </div>\r\n</div>\r\n</>\r\n)\r\n} else {\r\n    return (\r\n      <div>Sorry No Data\r\n        {error}\r\n      </div>\r\n  )\r\n}\r\n\r\n}\r\n\r\nexport default Movie\r\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":39,"column":5,"nodeType":"26","endLine":39,"endColumn":50},{"ruleId":"27","severity":1,"message":"28","line":82,"column":5,"nodeType":"26","endLine":82,"endColumn":68},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]