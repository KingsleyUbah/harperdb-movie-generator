import { useRef, useEffect } from 'react';

/* istanbul ignore next */
/** keep typescript happy */
var noop = function () { };
function useInterval(callback, delay, immediate) {
    var savedCallback = useRef(noop);
    // Remember the latest callback.
    useEffect(function () {
        savedCallback.current = callback;
    });
    // Execute callback if immediate is set.
    useEffect(function () {
        if (!immediate)
            return;
        if (delay === null || delay === false)
            return;
        savedCallback.current();
    }, [immediate]);
    // Set up the interval.
    useEffect(function () {
        if (delay === null || delay === false)
            return undefined;
        var tick = function () { return savedCallback.current(); };
        var id = setInterval(tick, delay);
        return function () { return clearInterval(id); };
    }, [delay]);
}

export default useInterval;
export { useInterval };
//# sourceMappingURL=index.es.js.map
