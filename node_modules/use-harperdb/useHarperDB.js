"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHarperDB = exports.HarperDBProvider = exports.HarperDBContext = void 0;

var _react = _interopRequireWildcard(require("react"));

var _useAsyncEffect = _interopRequireDefault(require("use-async-effect"));

var _useInterval = _interopRequireDefault(require("use-interval"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var HarperDBContext = /*#__PURE__*/(0, _react.createContext)({});
exports.HarperDBContext = HarperDBContext;

var HarperDBProvider = function HarperDBProvider(_ref) {
  var url = _ref.url,
      user = _ref.user,
      password = _ref.password,
      children = _ref.children;
  return /*#__PURE__*/_react["default"].createElement(HarperDBContext.Provider, {
    value: {
      user: user,
      password: password,
      url: url
    }
  }, children);
};

exports.HarperDBProvider = HarperDBProvider;

var useHarperDB = function useHarperDB(_ref2) {
  var query = _ref2.query,
      interval = _ref2.interval;

  var _useContext = (0, _react.useContext)(HarperDBContext),
      url = _useContext.url,
      user = _useContext.user,
      password = _useContext.password;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      lastInterval = _useState2[0],
      setLastInterval = _useState2[1];

  var _useState3 = (0, _react.useState)({
    loading: false,
    error: false,
    data: false
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      result = _useState4[0],
      setResult = _useState4[1];

  var queryBody = (0, _react.useMemo)(function () {
    return JSON.stringify(query);
  }, [query]);

  var refresh = function refresh() {
    return setLastInterval(Date.now());
  };

  var abortController;
  var executeQuery = (0, _react.useCallback)( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref3) {
      var stringifiedQuery, signal, request, json, response;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              stringifiedQuery = _ref3.stringifiedQuery, signal = _ref3.signal;
              _context.prev = 1;
              _context.next = 4;
              return fetch("".concat(url), {
                method: 'POST',
                signal: signal,
                body: stringifiedQuery,
                headers: {
                  'Content-Type': 'application/json',
                  authorization: "Basic ".concat(btoa("".concat(user, ":").concat(password)))
                }
              });

            case 4:
              request = _context.sent;
              _context.next = 7;
              return request.json();

            case 7:
              json = _context.sent;
              response = json.body || json;

              if (!response.error) {
                _context.next = 11;
                break;
              }

              return _context.abrupt("return", {
                error: response.message
              });

            case 11:
              return _context.abrupt("return", {
                data: response
              });

            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](1);
              return _context.abrupt("return", {
                error: _context.t0.message
              });

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 14]]);
    }));

    return function (_x) {
      return _ref4.apply(this, arguments);
    };
  }(), [url, user, password]);
  (0, _useAsyncEffect["default"])( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var response;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            abortController = new AbortController();
            setResult(_objectSpread(_objectSpread({}, result), {}, {
              loading: true
            }));
            _context2.next = 4;
            return executeQuery({
              stringifiedQuery: queryBody,
              signal: abortController.signal
            });

          case 4:
            response = _context2.sent;
            setResult(_objectSpread(_objectSpread(_objectSpread({}, result), response), {}, {
              loading: false
            }));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })), function () {
    return abortController && abortController.abort();
  }, [queryBody, lastInterval]);
  if (interval) (0, _useInterval["default"])(refresh, interval);
  return [result.data, result.loading, result.error, refresh];
};

exports.useHarperDB = useHarperDB;