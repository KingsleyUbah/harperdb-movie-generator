{"ast":null,"code":"import { useRef, useEffect } from 'react';\n/* istanbul ignore next */\n\n/** keep typescript happy */\n\nvar noop = function () {};\n\nfunction useInterval(callback, delay, immediate) {\n  var savedCallback = useRef(noop); // Remember the latest callback.\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }); // Execute callback if immediate is set.\n\n  useEffect(function () {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]); // Set up the interval.\n\n  useEffect(function () {\n    if (delay === null || delay === false) return undefined;\n\n    var tick = function () {\n      return savedCallback.current();\n    };\n\n    var id = setInterval(tick, delay);\n    return function () {\n      return clearInterval(id);\n    };\n  }, [delay]);\n}\n\nexport default useInterval;\nexport { useInterval };","map":{"version":3,"sources":["../src/index.tsx"],"names":[],"mappings":";AAEA;;;;AAEA,IAAM,IAAI,GAAG,YAAA,CAAQ,CAArB;;AAEA,SAAgB,WAAhB,CACE,QADF,EAEE,KAFF,EAGE,SAHF,EAGqB;AAEnB,MAAM,aAAa,GAAG,MAAM,CAAC,IAAD,CAA5B,CAFmB,C;;AAKnB,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,aAAa,CAAC,OAAd,GAAwB,QAAxB;AACD,GAFQ,CAAT,CALmB,C;;AAUnB,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,SAAL,EAAgB;AAChB,QAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,KAAhC,EAAuC;AACvC,IAAA,aAAa,CAAC,OAAd;AACD,GAJQ,EAIN,CAAC,SAAD,CAJM,CAAT,CAVmB,C;;AAiBnB,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,KAAhC,EAAuC,OAAO,SAAP;;AACvC,QAAM,IAAI,GAAG,YAAA;AAAM,aAAA,aAAa,CAAC,OAAd,EAAA;AAAuB,KAA1C;;AACA,QAAM,EAAE,GAAG,WAAW,CAAC,IAAD,EAAO,KAAP,CAAtB;AACA,WAAO,YAAA;AAAM,aAAA,aAAa,CAAC,EAAD,CAAb;AAAiB,KAA9B;AACD,GALQ,EAKN,CAAC,KAAD,CALM,CAAT;AAMD","sourcesContent":["import { useEffect, useRef } from 'react';\n\n/* istanbul ignore next */\n/** keep typescript happy */\nconst noop = () => {};\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]);\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined;\n    const tick = () => savedCallback.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nexport default useInterval;\n"]},"metadata":{},"sourceType":"module"}